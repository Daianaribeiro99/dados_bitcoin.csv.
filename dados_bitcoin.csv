import requests
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

def coletar_dados():
    url = 'https://api.coingecko.com/api/v3/coins/bitcoin/market_chart'
    parametros = {'vs_currency': 'usd', 'days': '30', 'interval': 'daily'}
    try:
        resposta = requests.get(url, params=parametros)
        resposta.raise_for_status()
        dados = resposta.json()
        precos = [dia[1] for dia in dados.get('prices', [])]
        if not precos:
            raise ValueError('Nenhum dado de preço foi coletado.')
        datas = pd.date_range(end=pd.Timestamp.today(), periods=len(precos))
        df = pd.DataFrame({'Data': datas, 'Preco': precos})
        df.to_csv('dados_bitcoin.csv', index=False, encoding='utf-8')
        return df
    except requests.exceptions.RequestException as e:
        print(f'Erro ao acessar a API: {e}')
        return None
    except ValueError as e:
        print(f'Erro nos dados coletados: {e}')
        return None

def preparar_dados(df):
    if df is None or df.empty:
        print('Dados indisponíveis para processamento.')
        return None
    df['Variacao'] = df['Preco'].pct_change()
    df.dropna(inplace=True)
    df['Alvo'] = (df['Variacao'] > 0).astype(int)
    return df

def treinar_modelo(df):
    if df is None or df.empty:
        print('Dados insuficientes para treinamento do modelo.')
        return
    X = df[['Variacao']]
    y = df['Alvo']
    if X.empty or y.empty:
        print('Erro: Dados insuficientes para treinamento.')
        return
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    if len(np.unique(y_train)) < 2:
        print('Erro: Não há variação suficiente nos dados para treinar o modelo.')
        return
    modelo = RandomForestClassifier(n_estimators=100, random_state=42)
    modelo.fit(X_train, y_train)
    y_pred = modelo.predict(X_test)
    acuracia = accuracy_score(y_test, y_pred)
    print(f'Acurácia do modelo: {acuracia:.2f}')

if __name__ == "__main__":
    df = coletar_dados()
    df = preparar_dados(df)
    treinar_modelo(df)
